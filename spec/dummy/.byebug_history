continue
::Rails.root.join('app', 'matestack')
::Rails.root
_prefixes
modified_prefixes
continue
modified_prefixes
modified_prefixes[2] = 'app/matestack/components/fancy'
modified_prefixes[2]
modified_prefixes
continue
self.views_dir
self.define_singleton_method(:views_dir) { 'matestack' }
self.views_dir
self.define_method(:views_dir) { 'matestack' }
self.views_dir
self.define_method(:views_dir) { 'matestack' }
self.define_method :views_dir { 'matestack' }
self.views_dir
continue
self.name.underscore.split('/')[0..-2].join('/')
self.name.underscore.split('/')[0..-1].join('/')
self.name.underscore.split('/')[0..-2]
self.name.underscore.split('/')[0..-1]
self.name.underscore
ApplicationController.render_to_string self.name.underscore
ApplicationController.new.render_to_string self.name.underscore
ApplicationController.render_to_string self.name.underscore
render self.name.underscore
render self.name.underscire
render self.underscore
self.name.underscore
self.view_name
extend ViewName::Path
self
self.views_dir
"#{::Rails.root}/app/matestack"
_prefixes
modified_prefixes
::Rails.root
Rails.root
modified_prefixes
continue
self.view_name
modified_prefixes
views_dir
continue
modified_prefixes
continue
modified_prefixes
continue
'FancyStuff'.underscore
'FancyStuff'.underscoer
FancyStuff.name
underscore('FancyStuff')
_prefixes
self.name.split('::')[-1].downcase
_prefixes.map { |p| pp = p.split('/'); pp.last.include?(self.name.split('::')[-1].downcase) }
_prefixes.map { |p| pp = p.split('/'); pp.last.include?(self.name.split('::')[-1].downcase }
_prefixes.map { |p| pp = p.split('/'); pp.last.include?(self.name.split('::')[-1].downcase; }
_prefixes.map { |p| pp = p.split('/') }
        end
          prefix
        else
          prefix_parts[0..-2].join("/")
        if prefix_parts.last.include?(self.name.split("::")[-1].downcase)
        prefix_parts = prefix.split("/")
modified_prefixes = _prefixes.map do |prefix|
_prefixes
continue
self.name
self
continue
self
continue
self
continue
self
continue
self
continue
self
continue
self
continue
self
continue
self
continue
self
continue
self
continue
self
self.class
_prefixes
continue
_prefixes
continue
_prefixes
continue
prefix_parts
continue
self.state_for_implicit_render(1)
self.state_for_implicit_render
self.context.keys
self.context['view_name']
self.context['view_naem']
self.context['view_path']
self.context.view_path
self.context
self.methods.select { |m| m.to_s.include? 'view' }
self.methods.select { |m| m.include? 'view' }
self.methods
self.views_dir
self
self._view_name
_view_name
self.view_paths
view_name
render
render_to_string self
render_to_string
view_paths
self.class
continue
self.class
continue
self.class
continue
self.class
continue
self.class
continue
self.class
continue
self.class
self
continue
view_paths
path
view_path
view_paths
continue
self.class.vue_js_name
continue
self.class.vue_js_name
continue
self.class.vue_js_name
continue
self.class.vue_js_name
continue
self.class.vue_js_name
continue
self.class.vue_js_name
continue
self.class.vue_js_name
continue
self.class.vue_js_name
continue
self.class.vue_js_name
self.class
self
continue
self.class.vue_js_name
continue
self.class.vue_js_name
continue
params.to_unsafe_h
params[:dummy_model][:old_status]
continue
params[:dummy_model][:old_status]
params[:old_status]
params.to_unsafe_h
dummy_model_params
continue
item_value(radio_options.first)
continue
item_value(radio_options.first)
item_value(radio_options.first).is_a? Integer
continue
DummyModel.last
n
params.to_unsafe_h
continue
params.to_unsafe_h
continue
params.to_unsafe_h
continue
params.to_unsafe_h
continue
params.to_unsafe_h
continue
options[:matestack_context][:controller].class
options
continue
options[:matestack_context]
options
continue
options[:matestack_context]
options
continue
options
continue
model
modle
options
continue
self.class
model
options
continue
@_controller
options
continue
self.instance_variables
@matestack_context
options[:matestack_context]
context
options
continue
options
self.class
self
continue
options[:matestack_context]
options.keys
@view_context
continue
options
continue
options
continue
options
continue
options[:matestack_context][:controller]
options[:matestack_context][:controller].params
options[:matestack_context][:controller].instance_variables
options[:matestack_context][:controller]
options
continue
options
context
continue
options[:context]
context
options
continue
options.keys
options.merge!(context: context)
context = (options[:context] ||= {}).merge(controller: @_controller)
options.keys
continue
options.keys
options
options[:context].keys
