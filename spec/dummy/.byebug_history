continue
params.to_unsafe_h
params[:dummy_model][:old_status]
continue
params[:dummy_model][:old_status]
params[:old_status]
params.to_unsafe_h
dummy_model_params
continue
item_value(radio_options.first)
continue
item_value(radio_options.first)
item_value(radio_options.first).is_a? Integer
continue
DummyModel.last
n
params.to_unsafe_h
continue
params.to_unsafe_h
continue
params.to_unsafe_h
continue
params.to_unsafe_h
continue
params.to_unsafe_h
continue
options[:matestack_context][:controller].class
options
continue
options[:matestack_context]
options
continue
options[:matestack_context]
options
continue
options
continue
model
modle
options
continue
self.class
model
options
continue
@_controller
options
continue
self.instance_variables
@matestack_context
options[:matestack_context]
context
options
continue
options
self.class
self
continue
options[:matestack_context]
options.keys
@view_context
continue
options
continue
options
continue
options
continue
options[:matestack_context][:controller]
options[:matestack_context][:controller].params
options[:matestack_context][:controller].instance_variables
options[:matestack_context][:controller]
options
continue
options
context
continue
options[:context]
context
options
continue
options.keys
options.merge!(context: context)
context = (options[:context] ||= {}).merge(controller: @_controller)
options.keys
continue
options.keys
options
options[:context].keys
options[:context]
options.merge!(context: context)
options[:context]
context
options.merge(context: context)
context = (options[:context] ||= {}).merge(controller: @_controller)
continue
context
options[:context]
@view_context
options
continue
options
continue
options
continue
options
context
continue
context = (options[:context] ||= {}).merge(controller: @_controller)
options
continue
options.to_h
options.to_hash
options[:context]
options
continue
@view_context
continue
context[:view_context]
context[:view_context].to_s
context[:view_context].ancestors
context[:view_context].class.class
context[:view_context].class.clas
context[:view_context].class.superclass
context[:view_context].instance
context[:view_context].instance_of
context[:view_context].is_a? Hash
context[:view_context]
context[:view_context].class
context[:view_context]
context.class
context
continue
self.instance_variables
@_controller.render_to_string 'demo/header', layout: false
@_controller.render_to_string 'demo/header'
@_controller
self.instance_variable_get(:@lookup_context)
self.instance_variables
self
context
self.respond_to?(:div)
caller[3]
caller[2]
caller[1]
caller[0]
caller
self.class.class
self.class
self
@controller
continue
@controller
continue
self.optional_hooks(options)
self.optional_hooks(options=
self.optional_hooks
self.class.optional_hooks
self.class.optional_properties
self.class.optional_properties.flatten.keys
self.class.optional_properties.flatten
self.class.optional_properties.keys
self.class.optional_properties
self.optional_keys
options.keys
options
self.singleton_methods - self.class.superclass.singleton_methods
self.singleton_methods . self.class.superclass.singleton_methods
self.class.superclass.singleton_methods
self.class.superclass
self.superclass
self.singleton_methods - self.superclass
self.singleton_methods - Trailblazer::Cell.singleton_methods
Trailblazer::Cell.singleton_methods
Cell.new.singleton_methods
Cell.singleton_methods
Cell
self.singleton_methods - Object.new.singleton_methods
self.singleton_methods - Object.singleton_methods
self.singleton_methods - Object.singleton_method
self.singleton_methods
self.methods
options.keys
options
optiona
continue
@view_context.controller.render_to_string partial: partial_path, layout: false
continue
@view_context.controller.instance_variables
@view_context.controller.instance_variable
@view_context.controller
@view_context.instance_variable_get(:@foo)
@view_context.instance_variable_get('foo')
@view_context.instance_variable_get(:foo)
@view_context.instance_variables(:foo)
@view_context.instance_variables
@view_context.foo
continue
context[:view_context].
context[:view_context].controller.render_to_string options[:path], layout: false
context[:view_context].controller
context[:view_context].controller.class
context[:view_context].controller
context[:view_context]
context[:view_context].keys
context.keys
context[:controller]
context
@controller
controller
continue
ApplicationController.new.render_to_string options[:path], layout: false
ApplicationController.new.render json: options[:path], layout: false
ApplicationController.new.render view: options[:path], layout: false
ApplicationController.new.render_to_string options[:path], layout: false
ApplicationController.new.render options[:path], layout: false
ApplicationController.new.render options[:path], layout: false, media_type: 'html'
ApplicationController.new.render options[:path], layout: false
continue
ApplicationController.new.render '/header'
ApplicationController.new.render '../header'
ApplicationController.new.render 'header'
ApplicationController.new.render
ApplicationController.new
continue
include ActionController::Rendering
ActionController::Rendering.new.render_to_string
ActionController::Rendering.render_to_string
ActionController::Rendering
render options[:path]
continue
render options[:path]
continue
render_to_string(::Rails.root.join('app','views','header.html.erb'))
render_to_string(::Rails.root.join('app','views','header'))
render_to_string(::Rails.root.join('app','views'))
render_to_string(Rails.root.join('app','views'))
render_to_string(Rails.root.join('app','views')
render_to_string
continue
params
continue
params
continue
params
continue
args
*args
continue
exit
name
exit
proceed
close
Object.const_get(a2.join("::"))
a2.join("::")
